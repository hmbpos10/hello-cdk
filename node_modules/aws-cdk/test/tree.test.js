"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const tree_1 = require("../lib/tree");
describe('some', () => {
    const tree = {
        id: 'App',
        path: '',
        children: {
            Tree: {
                id: 'Tree',
                path: 'Tree',
                constructInfo: {
                    fqn: '@aws-cdk/core.Construct',
                    version: '1.162.0',
                },
            },
            stack: {
                id: 'stack',
                path: 'stack',
                children: {
                    bucket: {
                        id: 'bucket',
                        path: 'stack/bucket',
                        children: {
                            Resource: {
                                id: 'Resource',
                                path: 'stack/bucket/Resource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'AWS::S3::Bucket',
                                    'aws:cdk:cloudformation:props': {},
                                },
                                constructInfo: {
                                    fqn: '@aws-cdk/aws-s3.CfnBucket',
                                    version: '1.162.0',
                                },
                            },
                        },
                        constructInfo: {
                            fqn: '@aws-cdk/aws-s3.Bucket',
                            version: '1.162.0',
                        },
                    },
                    CDKMetadata: {
                        id: 'CDKMetadata',
                        path: 'stack/CDKMetadata',
                        children: {
                            Default: {
                                id: 'Default',
                                path: 'stack/CDKMetadata/Default',
                                constructInfo: {
                                    fqn: '@aws-cdk/core.CfnResource',
                                    version: '1.162.0',
                                },
                            },
                            Condition: {
                                id: 'Condition',
                                path: 'stack/CDKMetadata/Condition',
                                constructInfo: {
                                    fqn: '@aws-cdk/core.CfnCondition',
                                    version: '1.162.0',
                                },
                            },
                        },
                        constructInfo: {
                            fqn: '@aws-cdk/core.Construct',
                            version: '1.162.0',
                        },
                    },
                },
                constructInfo: {
                    fqn: '@aws-cdk/core.Stack',
                    version: '1.162.0',
                },
            },
        },
        constructInfo: {
            fqn: '@aws-cdk/core.App',
            version: '1.162.0',
        },
    };
    test('tree matches predicate', () => {
        expect((0, tree_1.some)(tree, node => node.constructInfo?.fqn === '@aws-cdk/aws-s3.Bucket')).toBe(true);
    });
    test('tree does not match predicate', () => {
        expect((0, tree_1.some)(tree, node => node.constructInfo?.fqn === '@aws-cdk/aws-lambda.Function')).toBe(false);
    });
    test('childless tree', () => {
        const childless = {
            id: 'App',
            path: '',
            constructInfo: {
                fqn: '@aws-cdk/core.App',
                version: '1.162.0',
            },
        };
        expect((0, tree_1.some)(childless, node => node.path.length > 0)).toBe(false);
    });
});
describe('loadTreeFromDir', () => {
    test('can find tree', () => {
        const tree = (0, tree_1.loadTreeFromDir)(path.join(__dirname, 'cloud-assembly-trees/built-with-1_144_0'));
        expect(tree.id).toEqual('App');
    });
    test('cannot find tree', () => {
        const tree = (0, tree_1.loadTreeFromDir)(path.join(__dirname, 'cloud-assembly-trees/foo'));
        expect(tree).toEqual({});
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJlZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLHNDQUF1RTtBQUV2RSxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNwQixNQUFNLElBQUksR0FBc0I7UUFDOUIsRUFBRSxFQUFFLEtBQUs7UUFDVCxJQUFJLEVBQUUsRUFBRTtRQUNSLFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRTtnQkFDSixFQUFFLEVBQUUsTUFBTTtnQkFDVixJQUFJLEVBQUUsTUFBTTtnQkFDWixhQUFhLEVBQUU7b0JBQ2IsR0FBRyxFQUFFLHlCQUF5QjtvQkFDOUIsT0FBTyxFQUFFLFNBQVM7aUJBQ25CO2FBQ0Y7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsUUFBUSxFQUFFO29CQUNSLE1BQU0sRUFBRTt3QkFDTixFQUFFLEVBQUUsUUFBUTt3QkFDWixJQUFJLEVBQUUsY0FBYzt3QkFDcEIsUUFBUSxFQUFFOzRCQUNSLFFBQVEsRUFBRTtnQ0FDUixFQUFFLEVBQUUsVUFBVTtnQ0FDZCxJQUFJLEVBQUUsdUJBQXVCO2dDQUM3QixVQUFVLEVBQUU7b0NBQ1YsNkJBQTZCLEVBQUUsaUJBQWlCO29DQUNoRCw4QkFBOEIsRUFBRSxFQUFFO2lDQUNuQztnQ0FDRCxhQUFhLEVBQUU7b0NBQ2IsR0FBRyxFQUFFLDJCQUEyQjtvQ0FDaEMsT0FBTyxFQUFFLFNBQVM7aUNBQ25COzZCQUNGO3lCQUNGO3dCQUNELGFBQWEsRUFBRTs0QkFDYixHQUFHLEVBQUUsd0JBQXdCOzRCQUM3QixPQUFPLEVBQUUsU0FBUzt5QkFDbkI7cUJBQ0Y7b0JBQ0QsV0FBVyxFQUFFO3dCQUNYLEVBQUUsRUFBRSxhQUFhO3dCQUNqQixJQUFJLEVBQUUsbUJBQW1CO3dCQUN6QixRQUFRLEVBQUU7NEJBQ1IsT0FBTyxFQUFFO2dDQUNQLEVBQUUsRUFBRSxTQUFTO2dDQUNiLElBQUksRUFBRSwyQkFBMkI7Z0NBQ2pDLGFBQWEsRUFBRTtvQ0FDYixHQUFHLEVBQUUsMkJBQTJCO29DQUNoQyxPQUFPLEVBQUUsU0FBUztpQ0FDbkI7NkJBQ0Y7NEJBQ0QsU0FBUyxFQUFFO2dDQUNULEVBQUUsRUFBRSxXQUFXO2dDQUNmLElBQUksRUFBRSw2QkFBNkI7Z0NBQ25DLGFBQWEsRUFBRTtvQ0FDYixHQUFHLEVBQUUsNEJBQTRCO29DQUNqQyxPQUFPLEVBQUUsU0FBUztpQ0FDbkI7NkJBQ0Y7eUJBQ0Y7d0JBQ0QsYUFBYSxFQUFFOzRCQUNiLEdBQUcsRUFBRSx5QkFBeUI7NEJBQzlCLE9BQU8sRUFBRSxTQUFTO3lCQUNuQjtxQkFDRjtpQkFDRjtnQkFDRCxhQUFhLEVBQUU7b0JBQ2IsR0FBRyxFQUFFLHFCQUFxQjtvQkFDMUIsT0FBTyxFQUFFLFNBQVM7aUJBQ25CO2FBQ0Y7U0FDRjtRQUNELGFBQWEsRUFBRTtZQUNiLEdBQUcsRUFBRSxtQkFBbUI7WUFDeEIsT0FBTyxFQUFFLFNBQVM7U0FDbkI7S0FDRixDQUFDO0lBRUYsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUNsQyxNQUFNLENBQUMsSUFBQSxXQUFJLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEtBQUssd0JBQXdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDekMsTUFBTSxDQUFDLElBQUEsV0FBSSxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxLQUFLLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckcsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzFCLE1BQU0sU0FBUyxHQUFHO1lBQ2hCLEVBQUUsRUFBRSxLQUFLO1lBQ1QsSUFBSSxFQUFFLEVBQUU7WUFDUixhQUFhLEVBQUU7Z0JBQ2IsR0FBRyxFQUFFLG1CQUFtQjtnQkFDeEIsT0FBTyxFQUFFLFNBQVM7YUFDbkI7U0FDRixDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLElBQUEsc0JBQWUsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7UUFDOUYsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQzVCLE1BQU0sSUFBSSxHQUFHLElBQUEsc0JBQWUsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDLENBQUM7UUFDL0UsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENvbnN0cnVjdFRyZWVOb2RlLCBsb2FkVHJlZUZyb21EaXIsIHNvbWUgfSBmcm9tICcuLi9saWIvdHJlZSc7XG5cbmRlc2NyaWJlKCdzb21lJywgKCkgPT4ge1xuICBjb25zdCB0cmVlOiBDb25zdHJ1Y3RUcmVlTm9kZSA9IHtcbiAgICBpZDogJ0FwcCcsXG4gICAgcGF0aDogJycsXG4gICAgY2hpbGRyZW46IHtcbiAgICAgIFRyZWU6IHtcbiAgICAgICAgaWQ6ICdUcmVlJyxcbiAgICAgICAgcGF0aDogJ1RyZWUnLFxuICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgZnFuOiAnQGF3cy1jZGsvY29yZS5Db25zdHJ1Y3QnLFxuICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzdGFjazoge1xuICAgICAgICBpZDogJ3N0YWNrJyxcbiAgICAgICAgcGF0aDogJ3N0YWNrJyxcbiAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICBidWNrZXQ6IHtcbiAgICAgICAgICAgIGlkOiAnYnVja2V0JyxcbiAgICAgICAgICAgIHBhdGg6ICdzdGFjay9idWNrZXQnLFxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgUmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBpZDogJ1Jlc291cmNlJyxcbiAgICAgICAgICAgICAgICBwYXRoOiAnc3RhY2svYnVja2V0L1Jlc291cmNlJyxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgICAnYXdzOmNkazpjbG91ZGZvcm1hdGlvbjp0eXBlJzogJ0FXUzo6UzM6OkJ1Y2tldCcsXG4gICAgICAgICAgICAgICAgICAnYXdzOmNkazpjbG91ZGZvcm1hdGlvbjpwcm9wcyc6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uc3RydWN0SW5mbzoge1xuICAgICAgICAgICAgICAgICAgZnFuOiAnQGF3cy1jZGsvYXdzLXMzLkNmbkJ1Y2tldCcsXG4gICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnMS4xNjIuMCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgICAgIGZxbjogJ0Bhd3MtY2RrL2F3cy1zMy5CdWNrZXQnLFxuICAgICAgICAgICAgICB2ZXJzaW9uOiAnMS4xNjIuMCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgQ0RLTWV0YWRhdGE6IHtcbiAgICAgICAgICAgIGlkOiAnQ0RLTWV0YWRhdGEnLFxuICAgICAgICAgICAgcGF0aDogJ3N0YWNrL0NES01ldGFkYXRhJyxcbiAgICAgICAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgICAgICAgIERlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBpZDogJ0RlZmF1bHQnLFxuICAgICAgICAgICAgICAgIHBhdGg6ICdzdGFjay9DREtNZXRhZGF0YS9EZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgICAgICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkNmblJlc291cmNlJyxcbiAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBDb25kaXRpb246IHtcbiAgICAgICAgICAgICAgICBpZDogJ0NvbmRpdGlvbicsXG4gICAgICAgICAgICAgICAgcGF0aDogJ3N0YWNrL0NES01ldGFkYXRhL0NvbmRpdGlvbicsXG4gICAgICAgICAgICAgICAgY29uc3RydWN0SW5mbzoge1xuICAgICAgICAgICAgICAgICAgZnFuOiAnQGF3cy1jZGsvY29yZS5DZm5Db25kaXRpb24nLFxuICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzEuMTYyLjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uc3RydWN0SW5mbzoge1xuICAgICAgICAgICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkNvbnN0cnVjdCcsXG4gICAgICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgY29uc3RydWN0SW5mbzoge1xuICAgICAgICAgIGZxbjogJ0Bhd3MtY2RrL2NvcmUuU3RhY2snLFxuICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkFwcCcsXG4gICAgICB2ZXJzaW9uOiAnMS4xNjIuMCcsXG4gICAgfSxcbiAgfTtcblxuICB0ZXN0KCd0cmVlIG1hdGNoZXMgcHJlZGljYXRlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzb21lKHRyZWUsIG5vZGUgPT4gbm9kZS5jb25zdHJ1Y3RJbmZvPy5mcW4gPT09ICdAYXdzLWNkay9hd3MtczMuQnVja2V0JykpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3RyZWUgZG9lcyBub3QgbWF0Y2ggcHJlZGljYXRlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzb21lKHRyZWUsIG5vZGUgPT4gbm9kZS5jb25zdHJ1Y3RJbmZvPy5mcW4gPT09ICdAYXdzLWNkay9hd3MtbGFtYmRhLkZ1bmN0aW9uJykpLnRvQmUoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCdjaGlsZGxlc3MgdHJlZScsICgpID0+IHtcbiAgICBjb25zdCBjaGlsZGxlc3MgPSB7XG4gICAgICBpZDogJ0FwcCcsXG4gICAgICBwYXRoOiAnJyxcbiAgICAgIGNvbnN0cnVjdEluZm86IHtcbiAgICAgICAgZnFuOiAnQGF3cy1jZGsvY29yZS5BcHAnLFxuICAgICAgICB2ZXJzaW9uOiAnMS4xNjIuMCcsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBleHBlY3Qoc29tZShjaGlsZGxlc3MsIG5vZGUgPT4gbm9kZS5wYXRoLmxlbmd0aCA+IDApKS50b0JlKGZhbHNlKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2xvYWRUcmVlRnJvbURpcicsICgpID0+IHtcbiAgdGVzdCgnY2FuIGZpbmQgdHJlZScsICgpID0+IHtcbiAgICBjb25zdCB0cmVlID0gbG9hZFRyZWVGcm9tRGlyKHBhdGguam9pbihfX2Rpcm5hbWUsICdjbG91ZC1hc3NlbWJseS10cmVlcy9idWlsdC13aXRoLTFfMTQ0XzAnKSk7XG4gICAgZXhwZWN0KHRyZWUuaWQpLnRvRXF1YWwoJ0FwcCcpO1xuICB9KTtcblxuICB0ZXN0KCdjYW5ub3QgZmluZCB0cmVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSBsb2FkVHJlZUZyb21EaXIocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Nsb3VkLWFzc2VtYmx5LXRyZWVzL2ZvbycpKTtcbiAgICBleHBlY3QodHJlZSkudG9FcXVhbCh7fSk7XG4gIH0pO1xufSk7Il19