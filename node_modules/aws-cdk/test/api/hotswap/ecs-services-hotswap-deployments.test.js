"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const setup = require("./hotswap-test-setup");
const common_1 = require("../../../lib/api/hotswap/common");
let hotswapMockSdkProvider;
let mockRegisterTaskDef;
let mockUpdateService;
beforeEach(() => {
    hotswapMockSdkProvider = setup.setupHotswapTests();
    mockRegisterTaskDef = jest.fn();
    mockUpdateService = jest.fn();
    hotswapMockSdkProvider.stubEcs({
        registerTaskDefinition: mockRegisterTaskDef,
        updateService: mockUpdateService,
    }, {
        // these are needed for the waiter API that the ECS service hotswap uses
        api: {
            waiters: {},
        },
        makeRequest() {
            return {
                promise: () => Promise.resolve({}),
                response: {},
                addListeners: () => { },
            };
        },
    });
});
describe.each([common_1.HotswapMode.FALL_BACK, common_1.HotswapMode.HOTSWAP_ONLY])('%p mode', (hotswapMode) => {
    test('should call registerTaskDefinition and updateService for a difference only in the TaskDefinition with a Family property', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'my-task-def',
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            Family: 'my-task-def',
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                },
            },
        });
        // WHEN
        const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
        // THEN
        expect(deployStackResult).not.toBeUndefined();
        expect(mockRegisterTaskDef).toBeCalledWith({
            family: 'my-task-def',
            containerDefinitions: [
                { image: 'image2' },
            ],
        });
        expect(mockUpdateService).toBeCalledWith({
            service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
            cluster: 'my-cluster',
            taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            deploymentConfiguration: {
                minimumHealthyPercent: 0,
            },
            forceNewDeployment: true,
        });
    });
    test('any other TaskDefinition property change besides ContainerDefinition cannot be hotswapped in CLASSIC mode but does not block HOTSWAP_ONLY mode deployments', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'my-task-def',
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                        Cpu: '256',
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            Family: 'my-task-def',
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                            Cpu: '512',
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                },
            },
        });
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).toBeUndefined();
            expect(mockRegisterTaskDef).not.toHaveBeenCalled();
            expect(mockUpdateService).not.toHaveBeenCalled();
        }
        else if (hotswapMode === common_1.HotswapMode.HOTSWAP_ONLY) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).not.toBeUndefined();
            expect(mockRegisterTaskDef).toBeCalledWith({
                family: 'my-task-def',
                containerDefinitions: [
                    { image: 'image2' },
                ],
                cpu: '256', // this uses the old value because a new value could cause a service replacement
            });
            expect(mockUpdateService).toBeCalledWith({
                service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
                cluster: 'my-cluster',
                taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
                deploymentConfiguration: {
                    minimumHealthyPercent: 0,
                },
                forceNewDeployment: true,
            });
        }
    });
    test('deleting any other TaskDefinition property besides ContainerDefinition results in a full deployment in CLASSIC mode and a hotswap deployment in HOTSWAP_ONLY mode', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'my-task-def',
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                        Cpu: '256',
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            Family: 'my-task-def',
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                },
            },
        });
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).toBeUndefined();
            expect(mockRegisterTaskDef).not.toHaveBeenCalled();
            expect(mockUpdateService).not.toHaveBeenCalled();
        }
        else if (hotswapMode === common_1.HotswapMode.HOTSWAP_ONLY) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).not.toBeUndefined();
            expect(mockRegisterTaskDef).toBeCalledWith({
                family: 'my-task-def',
                containerDefinitions: [
                    { image: 'image2' },
                ],
                cpu: '256', // this uses the old value because a new value could cause a service replacement
            });
            expect(mockUpdateService).toBeCalledWith({
                service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
                cluster: 'my-cluster',
                taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
                deploymentConfiguration: {
                    minimumHealthyPercent: 0,
                },
                forceNewDeployment: true,
            });
        }
    });
    test('should call registerTaskDefinition and updateService for a difference only in the TaskDefinition without a Family property', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('TaskDef', 'AWS::ECS::TaskDefinition', 'arn:aws:ecs:region:account:task-definition/my-task-def:2'), setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                },
            },
        });
        // WHEN
        const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
        // THEN
        expect(deployStackResult).not.toBeUndefined();
        expect(mockRegisterTaskDef).toBeCalledWith({
            family: 'my-task-def',
            containerDefinitions: [
                { image: 'image2' },
            ],
        });
        expect(mockUpdateService).toBeCalledWith({
            service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
            cluster: 'my-cluster',
            taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            deploymentConfiguration: {
                minimumHealthyPercent: 0,
            },
            forceNewDeployment: true,
        });
    });
    test('a difference just in a TaskDefinition, without any services using it, is not hotswappable in FALL_BACK mode', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('TaskDef', 'AWS::ECS::TaskDefinition', 'arn:aws:ecs:region:account:task-definition/my-task-def:2'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                        },
                    },
                },
            },
        });
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).toBeUndefined();
            expect(mockRegisterTaskDef).not.toHaveBeenCalled();
            expect(mockUpdateService).not.toHaveBeenCalled();
        }
        else if (hotswapMode === common_1.HotswapMode.HOTSWAP_ONLY) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).not.toBeUndefined();
            expect(mockRegisterTaskDef).toBeCalledWith({
                family: 'my-task-def',
                containerDefinitions: [
                    { image: 'image2' },
                ],
            });
            expect(mockUpdateService).not.toHaveBeenCalledWith();
        }
    });
    test('if anything besides an ECS Service references the changed TaskDefinition, hotswapping is not possible in CLASSIC mode but is possible in HOTSWAP_ONLY', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'my-task-def',
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
                Function: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        Environment: {
                            Variables: {
                                TaskDefRevArn: { Ref: 'TaskDef' },
                            },
                        },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            Family: 'my-task-def',
                            ContainerDefinitions: [
                                { Image: 'image2' },
                            ],
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                    Function: {
                        Type: 'AWS::Lambda::Function',
                        Properties: {
                            Environment: {
                                Variables: {
                                    TaskDefRevArn: { Ref: 'TaskDef' },
                                },
                            },
                        },
                    },
                },
            },
        });
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).toBeUndefined();
            expect(mockRegisterTaskDef).not.toHaveBeenCalled();
            expect(mockUpdateService).not.toHaveBeenCalled();
        }
        else if (hotswapMode === common_1.HotswapMode.HOTSWAP_ONLY) {
            // WHEN
            const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
            // THEN
            expect(deployStackResult).not.toBeUndefined();
            expect(mockRegisterTaskDef).toBeCalledWith({
                family: 'my-task-def',
                containerDefinitions: [
                    { image: 'image2' },
                ],
            });
            expect(mockUpdateService).toBeCalledWith({
                service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
                cluster: 'my-cluster',
                taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
                deploymentConfiguration: {
                    minimumHealthyPercent: 0,
                },
                forceNewDeployment: true,
            });
        }
    });
    test('should call registerTaskDefinition with certain properties not lowercased', async () => {
        // GIVEN
        setup.setCurrentCfnStackTemplate({
            Resources: {
                TaskDef: {
                    Type: 'AWS::ECS::TaskDefinition',
                    Properties: {
                        Family: 'my-task-def',
                        ContainerDefinitions: [
                            { Image: 'image1' },
                        ],
                        Volumes: [
                            {
                                DockerVolumeConfiguration: {
                                    DriverOpts: { Option1: 'option1' },
                                    Labels: { Label1: 'label1' },
                                },
                            },
                        ],
                    },
                },
                Service: {
                    Type: 'AWS::ECS::Service',
                    Properties: {
                        TaskDefinition: { Ref: 'TaskDef' },
                    },
                },
            },
        });
        setup.pushStackResourceSummaries(setup.stackSummaryOf('Service', 'AWS::ECS::Service', 'arn:aws:ecs:region:account:service/my-cluster/my-service'));
        mockRegisterTaskDef.mockReturnValue({
            taskDefinition: {
                taskDefinitionArn: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            },
        });
        const cdkStackArtifact = setup.cdkStackArtifactOf({
            template: {
                Resources: {
                    TaskDef: {
                        Type: 'AWS::ECS::TaskDefinition',
                        Properties: {
                            Family: 'my-task-def',
                            ContainerDefinitions: [
                                {
                                    Image: 'image2',
                                    DockerLabels: { Label1: 'label1' },
                                    FirelensConfiguration: {
                                        Options: { Name: 'cloudwatch' },
                                    },
                                    LogConfiguration: {
                                        Options: { Option1: 'option1' },
                                    },
                                },
                            ],
                            Volumes: [
                                {
                                    DockerVolumeConfiguration: {
                                        DriverOpts: { Option1: 'option1' },
                                        Labels: { Label1: 'label1' },
                                    },
                                },
                            ],
                        },
                    },
                    Service: {
                        Type: 'AWS::ECS::Service',
                        Properties: {
                            TaskDefinition: { Ref: 'TaskDef' },
                        },
                    },
                },
            },
        });
        // WHEN
        const deployStackResult = await hotswapMockSdkProvider.tryHotswapDeployment(hotswapMode, cdkStackArtifact);
        // THEN
        expect(deployStackResult).not.toBeUndefined();
        expect(mockRegisterTaskDef).toBeCalledWith({
            family: 'my-task-def',
            containerDefinitions: [
                {
                    image: 'image2',
                    dockerLabels: { Label1: 'label1' },
                    firelensConfiguration: {
                        options: {
                            Name: 'cloudwatch',
                        },
                    },
                    logConfiguration: {
                        options: { Option1: 'option1' },
                    },
                },
            ],
            volumes: [
                {
                    dockerVolumeConfiguration: {
                        driverOpts: { Option1: 'option1' },
                        labels: { Label1: 'label1' },
                    },
                },
            ],
        });
        expect(mockUpdateService).toBeCalledWith({
            service: 'arn:aws:ecs:region:account:service/my-cluster/my-service',
            cluster: 'my-cluster',
            taskDefinition: 'arn:aws:ecs:region:account:task-definition/my-task-def:3',
            deploymentConfiguration: {
                minimumHealthyPercent: 0,
            },
            forceNewDeployment: true,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNzLXNlcnZpY2VzLWhvdHN3YXAtZGVwbG95bWVudHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVjcy1zZXJ2aWNlcy1ob3Rzd2FwLWRlcGxveW1lbnRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBOEM7QUFDOUMsNERBQThEO0FBRTlELElBQUksc0JBQW9ELENBQUM7QUFDekQsSUFBSSxtQkFBK0csQ0FBQztBQUNwSCxJQUFJLGlCQUEwRixDQUFDO0FBRS9GLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxzQkFBc0IsR0FBRyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUVuRCxtQkFBbUIsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDaEMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzlCLHNCQUFzQixDQUFDLE9BQU8sQ0FBQztRQUM3QixzQkFBc0IsRUFBRSxtQkFBbUI7UUFDM0MsYUFBYSxFQUFFLGlCQUFpQjtLQUNqQyxFQUFFO1FBQ0Qsd0VBQXdFO1FBQ3hFLEdBQUcsRUFBRTtZQUNILE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDRCxXQUFXO1lBQ1QsT0FBTztnQkFDTCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ2xDLFFBQVEsRUFBRSxFQUFFO2dCQUNaLFlBQVksRUFBRSxHQUFHLEVBQUUsR0FBRSxDQUFDO2FBQ3ZCLENBQUM7UUFDSixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQVcsQ0FBQyxTQUFTLEVBQUUsb0JBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO0lBQzFGLElBQUksQ0FBQyx5SEFBeUgsRUFBRSxLQUFLLElBQUksRUFBRTtR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QkFDbEMscUJBQXFCLEVBQUU7d0JBQ3JCLE9BQU8sRUFBRTs0QkFDUCxJQUFJLEVBQUUsWUFBWTt5QkFDbkI7cUJBQ0Y7b0JBQ0QsZ0JBQWdCLEVBQUU7d0JBQ2hCLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7cUJBQ2hDO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1A7b0JBQ0UseUJBQXlCLEVBQUU7d0JBQ3pCLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7d0JBQ2xDLE1BQU0sRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUU7cUJBQzdCO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxjQUFjLENBQUM7WUFDdkMsT0FBTyxFQUFFLDBEQUEwRDtZQUNuRSxPQUFPLEVBQUUsWUFBWTtZQUNyQixjQUFjLEVBQUUsMERBQTBEO1lBQzFFLHVCQUF1QixFQUFFO2dCQUN2QixxQkFBcUIsRUFBRSxDQUFDO2FBQ3pCO1lBQ0Qsa0JBQWtCLEVBQUUsSUFBSTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0ICogYXMgc2V0dXAgZnJvbSAnLi9ob3Rzd2FwLXRlc3Qtc2V0dXAnO1xuaW1wb3J0IHsgSG90c3dhcE1vZGUgfSBmcm9tICcuLi8uLi8uLi9saWIvYXBpL2hvdHN3YXAvY29tbW9uJztcblxubGV0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXI6IHNldHVwLkhvdHN3YXBNb2NrU2RrUHJvdmlkZXI7XG5sZXQgbW9ja1JlZ2lzdGVyVGFza0RlZjogamVzdC5Nb2NrPEFXUy5FQ1MuUmVnaXN0ZXJUYXNrRGVmaW5pdGlvblJlc3BvbnNlLCBBV1MuRUNTLlJlZ2lzdGVyVGFza0RlZmluaXRpb25SZXF1ZXN0W10+O1xubGV0IG1vY2tVcGRhdGVTZXJ2aWNlOiAocGFyYW1zOiBBV1MuRUNTLlVwZGF0ZVNlcnZpY2VSZXF1ZXN0KSA9PiBBV1MuRUNTLlVwZGF0ZVNlcnZpY2VSZXNwb25zZTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIgPSBzZXR1cC5zZXR1cEhvdHN3YXBUZXN0cygpO1xuXG4gIG1vY2tSZWdpc3RlclRhc2tEZWYgPSBqZXN0LmZuKCk7XG4gIG1vY2tVcGRhdGVTZXJ2aWNlID0gamVzdC5mbigpO1xuICBob3Rzd2FwTW9ja1Nka1Byb3ZpZGVyLnN0dWJFY3Moe1xuICAgIHJlZ2lzdGVyVGFza0RlZmluaXRpb246IG1vY2tSZWdpc3RlclRhc2tEZWYsXG4gICAgdXBkYXRlU2VydmljZTogbW9ja1VwZGF0ZVNlcnZpY2UsXG4gIH0sIHtcbiAgICAvLyB0aGVzZSBhcmUgbmVlZGVkIGZvciB0aGUgd2FpdGVyIEFQSSB0aGF0IHRoZSBFQ1Mgc2VydmljZSBob3Rzd2FwIHVzZXNcbiAgICBhcGk6IHtcbiAgICAgIHdhaXRlcnM6IHt9LFxuICAgIH0sXG4gICAgbWFrZVJlcXVlc3QoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoe30pLFxuICAgICAgICByZXNwb25zZToge30sXG4gICAgICAgIGFkZExpc3RlbmVyczogKCkgPT4ge30sXG4gICAgICB9O1xuICAgIH0sXG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlLmVhY2goW0hvdHN3YXBNb2RlLkZBTExfQkFDSywgSG90c3dhcE1vZGUuSE9UU1dBUF9PTkxZXSkoJyVwIG1vZGUnLCAoaG90c3dhcE1vZGUpID0+IHtcbiAgdGVzdCgnc2hvdWxkIGNhbGwgcmVnaXN0ZXJUYXNrRGVmaW5pdGlvbiBhbmQgdXBkYXRlU2VydmljZSBmb3IgYSBkaWZmZXJlbmNlIG9ubHkgaW4gdGhlIFRhc2tEZWZpbml0aW9uIHdpdGggYSBGYW1pbHkgcHJvcGVydHknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBzZXR1cC5zZXRDdXJyZW50Q2ZuU3RhY2tUZW1wbGF0ZSh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgIHsgSW1hZ2U6ICdpbWFnZTEnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc2V0dXAucHVzaFN0YWNrUmVzb3VyY2VTdW1tYXJpZXMoXG4gICAgICBzZXR1cC5zdGFja1N1bW1hcnlPZignU2VydmljZScsICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScpLFxuICAgICk7XG4gICAgbW9ja1JlZ2lzdGVyVGFza0RlZi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgdGFza0RlZmluaXRpb246IHtcbiAgICAgICAgdGFza0RlZmluaXRpb25Bcm46ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1N0YWNrQXJ0aWZhY3QgPSBzZXR1cC5jZGtTdGFja0FydGlmYWN0T2Yoe1xuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7IEltYWdlOiAnaW1hZ2UyJyB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGRlcGxveVN0YWNrUmVzdWx0ID0gYXdhaXQgaG90c3dhcE1vY2tTZGtQcm92aWRlci50cnlIb3Rzd2FwRGVwbG95bWVudChob3Rzd2FwTW9kZSwgY2RrU3RhY2tBcnRpZmFjdCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGRlcGxveVN0YWNrUmVzdWx0KS5ub3QudG9CZVVuZGVmaW5lZCgpO1xuICAgIGV4cGVjdChtb2NrUmVnaXN0ZXJUYXNrRGVmKS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICBmYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICBjb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICB7IGltYWdlOiAnaW1hZ2UyJyB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgICBleHBlY3QobW9ja1VwZGF0ZVNlcnZpY2UpLnRvQmVDYWxsZWRXaXRoKHtcbiAgICAgIHNlcnZpY2U6ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScsXG4gICAgICBjbHVzdGVyOiAnbXktY2x1c3RlcicsXG4gICAgICB0YXNrRGVmaW5pdGlvbjogJ2Fybjphd3M6ZWNzOnJlZ2lvbjphY2NvdW50OnRhc2stZGVmaW5pdGlvbi9teS10YXNrLWRlZjozJyxcbiAgICAgIGRlcGxveW1lbnRDb25maWd1cmF0aW9uOiB7XG4gICAgICAgIG1pbmltdW1IZWFsdGh5UGVyY2VudDogMCxcbiAgICAgIH0sXG4gICAgICBmb3JjZU5ld0RlcGxveW1lbnQ6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FueSBvdGhlciBUYXNrRGVmaW5pdGlvbiBwcm9wZXJ0eSBjaGFuZ2UgYmVzaWRlcyBDb250YWluZXJEZWZpbml0aW9uIGNhbm5vdCBiZSBob3Rzd2FwcGVkIGluIENMQVNTSUMgbW9kZSBidXQgZG9lcyBub3QgYmxvY2sgSE9UU1dBUF9PTkxZIG1vZGUgZGVwbG95bWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBzZXR1cC5zZXRDdXJyZW50Q2ZuU3RhY2tUZW1wbGF0ZSh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgIHsgSW1hZ2U6ICdpbWFnZTEnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgQ3B1OiAnMjU2JyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBTZXJ2aWNlOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpTZXJ2aWNlJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBUYXNrRGVmaW5pdGlvbjogeyBSZWY6ICdUYXNrRGVmJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHNldHVwLnB1c2hTdGFja1Jlc291cmNlU3VtbWFyaWVzKFxuICAgICAgc2V0dXAuc3RhY2tTdW1tYXJ5T2YoJ1NlcnZpY2UnLCAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnKSxcbiAgICApO1xuICAgIG1vY2tSZWdpc3RlclRhc2tEZWYubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHRhc2tEZWZpbml0aW9uOiB7XG4gICAgICAgIHRhc2tEZWZpbml0aW9uQXJuOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjMnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBjZGtTdGFja0FydGlmYWN0ID0gc2V0dXAuY2RrU3RhY2tBcnRpZmFjdE9mKHtcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIFJlc291cmNlczoge1xuICAgICAgICAgIFRhc2tEZWY6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBGYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgeyBJbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgQ3B1OiAnNTEyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBTZXJ2aWNlOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBUYXNrRGVmaW5pdGlvbjogeyBSZWY6ICdUYXNrRGVmJyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmIChob3Rzd2FwTW9kZSA9PT0gSG90c3dhcE1vZGUuRkFMTF9CQUNLKSB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCBkZXBsb3lTdGFja1Jlc3VsdCA9IGF3YWl0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIudHJ5SG90c3dhcERlcGxveW1lbnQoaG90c3dhcE1vZGUsIGNka1N0YWNrQXJ0aWZhY3QpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoZGVwbG95U3RhY2tSZXN1bHQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrUmVnaXN0ZXJUYXNrRGVmKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tVcGRhdGVTZXJ2aWNlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0gZWxzZSBpZiAoaG90c3dhcE1vZGUgPT09IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSkge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgZGVwbG95U3RhY2tSZXN1bHQgPSBhd2FpdCBob3Rzd2FwTW9ja1Nka1Byb3ZpZGVyLnRyeUhvdHN3YXBEZXBsb3ltZW50KGhvdHN3YXBNb2RlLCBjZGtTdGFja0FydGlmYWN0KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGRlcGxveVN0YWNrUmVzdWx0KS5ub3QudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1vY2tSZWdpc3RlclRhc2tEZWYpLnRvQmVDYWxsZWRXaXRoKHtcbiAgICAgICAgZmFtaWx5OiAnbXktdGFzay1kZWYnLFxuICAgICAgICBjb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICAgIHsgaW1hZ2U6ICdpbWFnZTInIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNwdTogJzI1NicsIC8vIHRoaXMgdXNlcyB0aGUgb2xkIHZhbHVlIGJlY2F1c2UgYSBuZXcgdmFsdWUgY291bGQgY2F1c2UgYSBzZXJ2aWNlIHJlcGxhY2VtZW50XG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChtb2NrVXBkYXRlU2VydmljZSkudG9CZUNhbGxlZFdpdGgoe1xuICAgICAgICBzZXJ2aWNlOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnLFxuICAgICAgICBjbHVzdGVyOiAnbXktY2x1c3RlcicsXG4gICAgICAgIHRhc2tEZWZpbml0aW9uOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjMnLFxuICAgICAgICBkZXBsb3ltZW50Q29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIG1pbmltdW1IZWFsdGh5UGVyY2VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgZm9yY2VOZXdEZXBsb3ltZW50OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICB0ZXN0KCdkZWxldGluZyBhbnkgb3RoZXIgVGFza0RlZmluaXRpb24gcHJvcGVydHkgYmVzaWRlcyBDb250YWluZXJEZWZpbml0aW9uIHJlc3VsdHMgaW4gYSBmdWxsIGRlcGxveW1lbnQgaW4gQ0xBU1NJQyBtb2RlIGFuZCBhIGhvdHN3YXAgZGVwbG95bWVudCBpbiBIT1RTV0FQX09OTFkgbW9kZScsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIHNldHVwLnNldEN1cnJlbnRDZm5TdGFja1RlbXBsYXRlKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBUYXNrRGVmOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgRmFtaWx5OiAnbXktdGFzay1kZWYnLFxuICAgICAgICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgeyBJbWFnZTogJ2ltYWdlMScgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBDcHU6ICcyNTYnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc2V0dXAucHVzaFN0YWNrUmVzb3VyY2VTdW1tYXJpZXMoXG4gICAgICBzZXR1cC5zdGFja1N1bW1hcnlPZignU2VydmljZScsICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScpLFxuICAgICk7XG4gICAgbW9ja1JlZ2lzdGVyVGFza0RlZi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgdGFza0RlZmluaXRpb246IHtcbiAgICAgICAgdGFza0RlZmluaXRpb25Bcm46ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1N0YWNrQXJ0aWZhY3QgPSBzZXR1cC5jZGtTdGFja0FydGlmYWN0T2Yoe1xuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7IEltYWdlOiAnaW1hZ2UyJyB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKGhvdHN3YXBNb2RlID09PSBIb3Rzd2FwTW9kZS5GQUxMX0JBQ0spIHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IGRlcGxveVN0YWNrUmVzdWx0ID0gYXdhaXQgaG90c3dhcE1vY2tTZGtQcm92aWRlci50cnlIb3Rzd2FwRGVwbG95bWVudChob3Rzd2FwTW9kZSwgY2RrU3RhY2tBcnRpZmFjdCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChkZXBsb3lTdGFja1Jlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1vY2tSZWdpc3RlclRhc2tEZWYpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja1VwZGF0ZVNlcnZpY2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSBlbHNlIGlmIChob3Rzd2FwTW9kZSA9PT0gSG90c3dhcE1vZGUuSE9UU1dBUF9PTkxZKSB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCBkZXBsb3lTdGFja1Jlc3VsdCA9IGF3YWl0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIudHJ5SG90c3dhcERlcGxveW1lbnQoaG90c3dhcE1vZGUsIGNka1N0YWNrQXJ0aWZhY3QpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoZGVwbG95U3RhY2tSZXN1bHQpLm5vdC50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9ja1JlZ2lzdGVyVGFza0RlZikudG9CZUNhbGxlZFdpdGgoe1xuICAgICAgICBmYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICAgIGNvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgeyBpbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgICAgXSxcbiAgICAgICAgY3B1OiAnMjU2JywgLy8gdGhpcyB1c2VzIHRoZSBvbGQgdmFsdWUgYmVjYXVzZSBhIG5ldyB2YWx1ZSBjb3VsZCBjYXVzZSBhIHNlcnZpY2UgcmVwbGFjZW1lbnRcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KG1vY2tVcGRhdGVTZXJ2aWNlKS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICAgIHNlcnZpY2U6ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScsXG4gICAgICAgIGNsdXN0ZXI6ICdteS1jbHVzdGVyJyxcbiAgICAgICAgdGFza0RlZmluaXRpb246ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICAgIGRlcGxveW1lbnRDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgbWluaW11bUhlYWx0aHlQZXJjZW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBmb3JjZU5ld0RlcGxveW1lbnQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBjYWxsIHJlZ2lzdGVyVGFza0RlZmluaXRpb24gYW5kIHVwZGF0ZVNlcnZpY2UgZm9yIGEgZGlmZmVyZW5jZSBvbmx5IGluIHRoZSBUYXNrRGVmaW5pdGlvbiB3aXRob3V0IGEgRmFtaWx5IHByb3BlcnR5JywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgc2V0dXAuc2V0Q3VycmVudENmblN0YWNrVGVtcGxhdGUoe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFRhc2tEZWY6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICAgICAgICB7IEltYWdlOiAnaW1hZ2UxJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBTZXJ2aWNlOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpTZXJ2aWNlJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBUYXNrRGVmaW5pdGlvbjogeyBSZWY6ICdUYXNrRGVmJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHNldHVwLnB1c2hTdGFja1Jlc291cmNlU3VtbWFyaWVzKFxuICAgICAgc2V0dXAuc3RhY2tTdW1tYXJ5T2YoJ1Rhc2tEZWYnLCAnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJyxcbiAgICAgICAgJ2Fybjphd3M6ZWNzOnJlZ2lvbjphY2NvdW50OnRhc2stZGVmaW5pdGlvbi9teS10YXNrLWRlZjoyJyksXG4gICAgICBzZXR1cC5zdGFja1N1bW1hcnlPZignU2VydmljZScsICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScpLFxuICAgICk7XG4gICAgbW9ja1JlZ2lzdGVyVGFza0RlZi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgdGFza0RlZmluaXRpb246IHtcbiAgICAgICAgdGFza0RlZmluaXRpb25Bcm46ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1N0YWNrQXJ0aWZhY3QgPSBzZXR1cC5jZGtTdGFja0FydGlmYWN0T2Yoe1xuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgeyBJbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBTZXJ2aWNlOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBUYXNrRGVmaW5pdGlvbjogeyBSZWY6ICdUYXNrRGVmJyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBkZXBsb3lTdGFja1Jlc3VsdCA9IGF3YWl0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIudHJ5SG90c3dhcERlcGxveW1lbnQoaG90c3dhcE1vZGUsIGNka1N0YWNrQXJ0aWZhY3QpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChkZXBsb3lTdGFja1Jlc3VsdCkubm90LnRvQmVVbmRlZmluZWQoKTtcbiAgICBleHBlY3QobW9ja1JlZ2lzdGVyVGFza0RlZikudG9CZUNhbGxlZFdpdGgoe1xuICAgICAgZmFtaWx5OiAnbXktdGFzay1kZWYnLFxuICAgICAgY29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgeyBpbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgZXhwZWN0KG1vY2tVcGRhdGVTZXJ2aWNlKS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICBzZXJ2aWNlOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnLFxuICAgICAgY2x1c3RlcjogJ215LWNsdXN0ZXInLFxuICAgICAgdGFza0RlZmluaXRpb246ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICBkZXBsb3ltZW50Q29uZmlndXJhdGlvbjoge1xuICAgICAgICBtaW5pbXVtSGVhbHRoeVBlcmNlbnQ6IDAsXG4gICAgICB9LFxuICAgICAgZm9yY2VOZXdEZXBsb3ltZW50OiB0cnVlLFxuICAgIH0pO1xuICB9KTtcblxuICB0ZXN0KCdhIGRpZmZlcmVuY2UganVzdCBpbiBhIFRhc2tEZWZpbml0aW9uLCB3aXRob3V0IGFueSBzZXJ2aWNlcyB1c2luZyBpdCwgaXMgbm90IGhvdHN3YXBwYWJsZSBpbiBGQUxMX0JBQ0sgbW9kZScsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIHNldHVwLnNldEN1cnJlbnRDZm5TdGFja1RlbXBsYXRlKHtcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBUYXNrRGVmOiB7XG4gICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgeyBJbWFnZTogJ2ltYWdlMScgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc2V0dXAucHVzaFN0YWNrUmVzb3VyY2VTdW1tYXJpZXMoXG4gICAgICBzZXR1cC5zdGFja1N1bW1hcnlPZignVGFza0RlZicsICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjInKSxcbiAgICApO1xuICAgIG1vY2tSZWdpc3RlclRhc2tEZWYubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHRhc2tEZWZpbml0aW9uOiB7XG4gICAgICAgIHRhc2tEZWZpbml0aW9uQXJuOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjMnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBjZGtTdGFja0FydGlmYWN0ID0gc2V0dXAuY2RrU3RhY2tBcnRpZmFjdE9mKHtcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIFJlc291cmNlczoge1xuICAgICAgICAgIFRhc2tEZWY6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICAgICAgICAgIHsgSW1hZ2U6ICdpbWFnZTInIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKGhvdHN3YXBNb2RlID09PSBIb3Rzd2FwTW9kZS5GQUxMX0JBQ0spIHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IGRlcGxveVN0YWNrUmVzdWx0ID0gYXdhaXQgaG90c3dhcE1vY2tTZGtQcm92aWRlci50cnlIb3Rzd2FwRGVwbG95bWVudChob3Rzd2FwTW9kZSwgY2RrU3RhY2tBcnRpZmFjdCk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIGV4cGVjdChkZXBsb3lTdGFja1Jlc3VsdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1vY2tSZWdpc3RlclRhc2tEZWYpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja1VwZGF0ZVNlcnZpY2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSBlbHNlIGlmIChob3Rzd2FwTW9kZSA9PT0gSG90c3dhcE1vZGUuSE9UU1dBUF9PTkxZKSB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCBkZXBsb3lTdGFja1Jlc3VsdCA9IGF3YWl0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIudHJ5SG90c3dhcERlcGxveW1lbnQoaG90c3dhcE1vZGUsIGNka1N0YWNrQXJ0aWZhY3QpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoZGVwbG95U3RhY2tSZXN1bHQpLm5vdC50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9ja1JlZ2lzdGVyVGFza0RlZikudG9CZUNhbGxlZFdpdGgoe1xuICAgICAgICBmYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICAgIGNvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgeyBpbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1VwZGF0ZVNlcnZpY2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aCgpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGVzdCgnaWYgYW55dGhpbmcgYmVzaWRlcyBhbiBFQ1MgU2VydmljZSByZWZlcmVuY2VzIHRoZSBjaGFuZ2VkIFRhc2tEZWZpbml0aW9uLCBob3Rzd2FwcGluZyBpcyBub3QgcG9zc2libGUgaW4gQ0xBU1NJQyBtb2RlIGJ1dCBpcyBwb3NzaWJsZSBpbiBIT1RTV0FQX09OTFknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBzZXR1cC5zZXRDdXJyZW50Q2ZuU3RhY2tUZW1wbGF0ZSh7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgIHsgSW1hZ2U6ICdpbWFnZTEnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgRnVuY3Rpb246IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBFbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICBWYXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICBUYXNrRGVmUmV2QXJuOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHNldHVwLnB1c2hTdGFja1Jlc291cmNlU3VtbWFyaWVzKFxuICAgICAgc2V0dXAuc3RhY2tTdW1tYXJ5T2YoJ1NlcnZpY2UnLCAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnKSxcbiAgICApO1xuICAgIG1vY2tSZWdpc3RlclRhc2tEZWYubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIHRhc2tEZWZpbml0aW9uOiB7XG4gICAgICAgIHRhc2tEZWZpbml0aW9uQXJuOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjMnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCBjZGtTdGFja0FydGlmYWN0ID0gc2V0dXAuY2RrU3RhY2tBcnRpZmFjdE9mKHtcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgIFJlc291cmNlczoge1xuICAgICAgICAgIFRhc2tEZWY6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6VGFza0RlZmluaXRpb24nLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBGYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICAgICAgICAgIENvbnRhaW5lckRlZmluaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgeyBJbWFnZTogJ2ltYWdlMicgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBTZXJ2aWNlOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgICAgICBUYXNrRGVmaW5pdGlvbjogeyBSZWY6ICdUYXNrRGVmJyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIEZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBUeXBlOiAnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJyxcbiAgICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgRW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICBWYXJpYWJsZXM6IHtcbiAgICAgICAgICAgICAgICAgIFRhc2tEZWZSZXZBcm46IHsgUmVmOiAnVGFza0RlZicgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmIChob3Rzd2FwTW9kZSA9PT0gSG90c3dhcE1vZGUuRkFMTF9CQUNLKSB7XG4gICAgICAvLyBXSEVOXG4gICAgICBjb25zdCBkZXBsb3lTdGFja1Jlc3VsdCA9IGF3YWl0IGhvdHN3YXBNb2NrU2RrUHJvdmlkZXIudHJ5SG90c3dhcERlcGxveW1lbnQoaG90c3dhcE1vZGUsIGNka1N0YWNrQXJ0aWZhY3QpO1xuXG4gICAgICAvLyBUSEVOXG4gICAgICBleHBlY3QoZGVwbG95U3RhY2tSZXN1bHQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrUmVnaXN0ZXJUYXNrRGVmKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tVcGRhdGVTZXJ2aWNlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0gZWxzZSBpZiAoaG90c3dhcE1vZGUgPT09IEhvdHN3YXBNb2RlLkhPVFNXQVBfT05MWSkge1xuICAgICAgLy8gV0hFTlxuICAgICAgY29uc3QgZGVwbG95U3RhY2tSZXN1bHQgPSBhd2FpdCBob3Rzd2FwTW9ja1Nka1Byb3ZpZGVyLnRyeUhvdHN3YXBEZXBsb3ltZW50KGhvdHN3YXBNb2RlLCBjZGtTdGFja0FydGlmYWN0KTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgZXhwZWN0KGRlcGxveVN0YWNrUmVzdWx0KS5ub3QudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KG1vY2tSZWdpc3RlclRhc2tEZWYpLnRvQmVDYWxsZWRXaXRoKHtcbiAgICAgICAgZmFtaWx5OiAnbXktdGFzay1kZWYnLFxuICAgICAgICBjb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICAgIHsgaW1hZ2U6ICdpbWFnZTInIH0sXG4gICAgICAgIF0sXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChtb2NrVXBkYXRlU2VydmljZSkudG9CZUNhbGxlZFdpdGgoe1xuICAgICAgICBzZXJ2aWNlOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnLFxuICAgICAgICBjbHVzdGVyOiAnbXktY2x1c3RlcicsXG4gICAgICAgIHRhc2tEZWZpbml0aW9uOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6dGFzay1kZWZpbml0aW9uL215LXRhc2stZGVmOjMnLFxuICAgICAgICBkZXBsb3ltZW50Q29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIG1pbmltdW1IZWFsdGh5UGVyY2VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgZm9yY2VOZXdEZXBsb3ltZW50OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgY2FsbCByZWdpc3RlclRhc2tEZWZpbml0aW9uIHdpdGggY2VydGFpbiBwcm9wZXJ0aWVzIG5vdCBsb3dlcmNhc2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgc2V0dXAuc2V0Q3VycmVudENmblN0YWNrVGVtcGxhdGUoe1xuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFRhc2tEZWY6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlRhc2tEZWZpbml0aW9uJyxcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBGYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICAgICAgICBDb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICAgICAgICB7IEltYWdlOiAnaW1hZ2UxJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFZvbHVtZXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIERvY2tlclZvbHVtZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgIERyaXZlck9wdHM6IHsgT3B0aW9uMTogJ29wdGlvbjEnIH0sXG4gICAgICAgICAgICAgICAgICBMYWJlbHM6IHsgTGFiZWwxOiAnbGFiZWwxJyB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICBUeXBlOiAnQVdTOjpFQ1M6OlNlcnZpY2UnLFxuICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc2V0dXAucHVzaFN0YWNrUmVzb3VyY2VTdW1tYXJpZXMoXG4gICAgICBzZXR1cC5zdGFja1N1bW1hcnlPZignU2VydmljZScsICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDpzZXJ2aWNlL215LWNsdXN0ZXIvbXktc2VydmljZScpLFxuICAgICk7XG4gICAgbW9ja1JlZ2lzdGVyVGFza0RlZi5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgdGFza0RlZmluaXRpb246IHtcbiAgICAgICAgdGFza0RlZmluaXRpb25Bcm46ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGNka1N0YWNrQXJ0aWZhY3QgPSBzZXR1cC5jZGtTdGFja0FydGlmYWN0T2Yoe1xuICAgICAgdGVtcGxhdGU6IHtcbiAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgVGFza0RlZjoge1xuICAgICAgICAgICAgVHlwZTogJ0FXUzo6RUNTOjpUYXNrRGVmaW5pdGlvbicsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIEZhbWlseTogJ215LXRhc2stZGVmJyxcbiAgICAgICAgICAgICAgQ29udGFpbmVyRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBJbWFnZTogJ2ltYWdlMicsXG4gICAgICAgICAgICAgICAgICBEb2NrZXJMYWJlbHM6IHsgTGFiZWwxOiAnbGFiZWwxJyB9LFxuICAgICAgICAgICAgICAgICAgRmlyZWxlbnNDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIE9wdGlvbnM6IHsgTmFtZTogJ2Nsb3Vkd2F0Y2gnIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgTG9nQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBPcHRpb25zOiB7IE9wdGlvbjE6ICdvcHRpb24xJyB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBWb2x1bWVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgRG9ja2VyVm9sdW1lQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBEcml2ZXJPcHRzOiB7IE9wdGlvbjE6ICdvcHRpb24xJyB9LFxuICAgICAgICAgICAgICAgICAgICBMYWJlbHM6IHsgTGFiZWwxOiAnbGFiZWwxJyB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFNlcnZpY2U6IHtcbiAgICAgICAgICAgIFR5cGU6ICdBV1M6OkVDUzo6U2VydmljZScsXG4gICAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIFRhc2tEZWZpbml0aW9uOiB7IFJlZjogJ1Rhc2tEZWYnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGRlcGxveVN0YWNrUmVzdWx0ID0gYXdhaXQgaG90c3dhcE1vY2tTZGtQcm92aWRlci50cnlIb3Rzd2FwRGVwbG95bWVudChob3Rzd2FwTW9kZSwgY2RrU3RhY2tBcnRpZmFjdCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGRlcGxveVN0YWNrUmVzdWx0KS5ub3QudG9CZVVuZGVmaW5lZCgpO1xuICAgIGV4cGVjdChtb2NrUmVnaXN0ZXJUYXNrRGVmKS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICBmYW1pbHk6ICdteS10YXNrLWRlZicsXG4gICAgICBjb250YWluZXJEZWZpbml0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW1hZ2U6ICdpbWFnZTInLFxuICAgICAgICAgIGRvY2tlckxhYmVsczogeyBMYWJlbDE6ICdsYWJlbDEnIH0sXG4gICAgICAgICAgZmlyZWxlbnNDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIE5hbWU6ICdjbG91ZHdhdGNoJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2dDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7IE9wdGlvbjE6ICdvcHRpb24xJyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdm9sdW1lczogW1xuICAgICAgICB7XG4gICAgICAgICAgZG9ja2VyVm9sdW1lQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgICAgZHJpdmVyT3B0czogeyBPcHRpb24xOiAnb3B0aW9uMScgfSxcbiAgICAgICAgICAgIGxhYmVsczogeyBMYWJlbDE6ICdsYWJlbDEnIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgZXhwZWN0KG1vY2tVcGRhdGVTZXJ2aWNlKS50b0JlQ2FsbGVkV2l0aCh7XG4gICAgICBzZXJ2aWNlOiAnYXJuOmF3czplY3M6cmVnaW9uOmFjY291bnQ6c2VydmljZS9teS1jbHVzdGVyL215LXNlcnZpY2UnLFxuICAgICAgY2x1c3RlcjogJ215LWNsdXN0ZXInLFxuICAgICAgdGFza0RlZmluaXRpb246ICdhcm46YXdzOmVjczpyZWdpb246YWNjb3VudDp0YXNrLWRlZmluaXRpb24vbXktdGFzay1kZWY6MycsXG4gICAgICBkZXBsb3ltZW50Q29uZmlndXJhdGlvbjoge1xuICAgICAgICBtaW5pbXVtSGVhbHRoeVBlcmNlbnQ6IDAsXG4gICAgICB9LFxuICAgICAgZm9yY2VOZXdEZXBsb3ltZW50OiB0cnVlLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19