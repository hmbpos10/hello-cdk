"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const build_1 = require("../lib/build");
describe('buildAllStackAssets', () => {
    const A = { id: 'A' };
    const B = { id: 'B' };
    const C = { id: 'C' };
    const toPublish = [A, B, C];
    const sleep = async (duration) => new Promise((resolve) => setTimeout(() => resolve(), duration));
    test('build', async () => {
        // GIVEN
        const buildStackAssets = jest.fn(() => sleep(1));
        // WHEN/THEN
        await expect((0, build_1.buildAllStackAssets)(toPublish, { buildStackAssets }))
            .resolves
            .toBeUndefined();
        expect(buildStackAssets).toBeCalledTimes(3);
        expect(buildStackAssets).toBeCalledWith(A);
        expect(buildStackAssets).toBeCalledWith(B);
        expect(buildStackAssets).toBeCalledWith(C);
    });
    test('errors', async () => {
        // GIVEN
        const buildStackAssets = async () => { throw new Error('Message'); };
        // WHEN/THEN
        await expect((0, build_1.buildAllStackAssets)(toPublish, { buildStackAssets }))
            .rejects
            .toThrow('Building Assets Failed: Error: Message, Error: Message, Error: Message');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1aWxkLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx3Q0FBbUQ7QUFJbkQsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUF1QixDQUFDO0lBRWxELE1BQU0sS0FBSyxHQUFHLEtBQUssRUFBRSxRQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFaEgsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2QixRQUFRO1FBQ1IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpELFlBQVk7UUFDWixNQUFNLE1BQU0sQ0FBQyxJQUFBLDJCQUFtQixFQUFDLFNBQVMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQzthQUMvRCxRQUFRO2FBQ1IsYUFBYSxFQUFFLENBQUM7UUFFbkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4QixRQUFRO1FBQ1IsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckUsWUFBWTtRQUNaLE1BQU0sTUFBTSxDQUFDLElBQUEsMkJBQW1CLEVBQUMsU0FBUyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO2FBQy9ELE9BQU87YUFDUCxPQUFPLENBQUMsd0VBQXdFLENBQUMsQ0FBQztJQUN2RixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IGJ1aWxkQWxsU3RhY2tBc3NldHMgfSBmcm9tICcuLi9saWIvYnVpbGQnO1xuXG50eXBlIFN0YWNrID0gY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0O1xuXG5kZXNjcmliZSgnYnVpbGRBbGxTdGFja0Fzc2V0cycsICgpID0+IHtcbiAgY29uc3QgQSA9IHsgaWQ6ICdBJyB9O1xuICBjb25zdCBCID0geyBpZDogJ0InIH07XG4gIGNvbnN0IEMgPSB7IGlkOiAnQycgfTtcbiAgY29uc3QgdG9QdWJsaXNoID0gW0EsIEIsIENdIGFzIHVua25vd24gYXMgU3RhY2tbXTtcblxuICBjb25zdCBzbGVlcCA9IGFzeW5jIChkdXJhdGlvbjogbnVtYmVyKSA9PiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCksIGR1cmF0aW9uKSk7XG5cbiAgdGVzdCgnYnVpbGQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBidWlsZFN0YWNrQXNzZXRzID0gamVzdC5mbigoKSA9PiBzbGVlcCgxKSk7XG5cbiAgICAvLyBXSEVOL1RIRU5cbiAgICBhd2FpdCBleHBlY3QoYnVpbGRBbGxTdGFja0Fzc2V0cyh0b1B1Ymxpc2gsIHsgYnVpbGRTdGFja0Fzc2V0cyB9KSlcbiAgICAgIC5yZXNvbHZlc1xuICAgICAgLnRvQmVVbmRlZmluZWQoKTtcblxuICAgIGV4cGVjdChidWlsZFN0YWNrQXNzZXRzKS50b0JlQ2FsbGVkVGltZXMoMyk7XG4gICAgZXhwZWN0KGJ1aWxkU3RhY2tBc3NldHMpLnRvQmVDYWxsZWRXaXRoKEEpO1xuICAgIGV4cGVjdChidWlsZFN0YWNrQXNzZXRzKS50b0JlQ2FsbGVkV2l0aChCKTtcbiAgICBleHBlY3QoYnVpbGRTdGFja0Fzc2V0cykudG9CZUNhbGxlZFdpdGgoQyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Vycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGJ1aWxkU3RhY2tBc3NldHMgPSBhc3luYyAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTWVzc2FnZScpOyB9O1xuXG4gICAgLy8gV0hFTi9USEVOXG4gICAgYXdhaXQgZXhwZWN0KGJ1aWxkQWxsU3RhY2tBc3NldHModG9QdWJsaXNoLCB7IGJ1aWxkU3RhY2tBc3NldHMgfSkpXG4gICAgICAucmVqZWN0c1xuICAgICAgLnRvVGhyb3coJ0J1aWxkaW5nIEFzc2V0cyBGYWlsZWQ6IEVycm9yOiBNZXNzYWdlLCBFcnJvcjogTWVzc2FnZSwgRXJyb3I6IE1lc3NhZ2UnKTtcbiAgfSk7XG59KTtcbiJdfQ==